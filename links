https://github.com/shreyag28/python-app.git
#!/bin/bash
echo "Create migrations"
python manage.py makemigrations djangoapp
echo "=================================="

echo "Migrate"
python manage.py migrate
echo "=================================="

echo "Create Superuser"
DJANGO_SUPERUSER_USERNAME="admin" \
DJANGO_SUPERUSER_PASSWORD="" \
DJANGO_SUPERUSER_EMAIL="email@kanis.hk" \
python manage.py createsuperuser --noinput
echo "=================================="

echo "Start server"
python manage.py runserver 0.0.0.0:8000



[Pipeline] withCredentials
Masking supported pattern matches of $DJANGO_SUPERUSER_PASSWORD
[Pipeline] {
[Pipeline] sh
+ docker-compose exec -T djangoapp python manage.py test
System check identified no issues (0 silenced).

----------------------------------------------------------------------
Ran 0 tests in 0.000s

OK
[Pipeline] sh
+ ./django.sh
Create migrations
./django.sh: line 3: python: command not found
==================================
Migrate
./django.sh: line 7: python: command not found
==================================
Create Superuser
./django.sh: line 11: python: command not found
==================================
Start server
./django.sh: line 18: python: command not found
[Pipeline] }
[Pipeline] // withCredentials
[Pipeline] }
[Pipeline] // script
[Pipeline] }
[Pipeline] // stage
[Pipeline] }
[Pipeline] // withEnv
[Pipeline] }
[Pipeline] // node
[Pipeline] End of Pipeline
ERROR: script returned exit code 127
Finished: FAILURE


pipeline {
   agent any

   environment {
       registry = "srikanthbattula/djangoapp"
       registryCredential = 'django_id'
       DJANGO_SUPERUSER_PASSWORD = ('django_id1')
   }

   stages {
       stage('Checkout') {
           steps {
               checkout scmGit(branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/Srikanthbatt/python-app.git']])
           }
       }

       stage('Build and Push Image') {
           steps {
               script {
                   // Build and push your Docker image
                   dockerImage = docker.build registry
                   docker.withRegistry('', registryCredential) {
                       dockerImage.push()
                   }
               }
           }
       }

       stage('Deploy Using Docker Compose') {
           steps {
               // Start services using Docker Compose
               sh 'docker-compose up -d'
           }
       }

       stage('Run Django Setup') {
           steps {
               script {
                   // Set executable permissions for django.sh
                   sh 'chmod +x django.sh'
                   // Get the secret value using withCredentials
                   withCredentials([string(credentialsId: 'django_id1', variable: 'DJANGO_SUPERUSER_PASSWORD')]) {
                       DJANGO_SUPERUSER_PASSWORD = env.DJANGO_SUPERUSER_PASSWORD
                       // Run tests for the Django application
                       sh 'docker-compose exec -T djangoapp python manage.py test'
                       // Run Django setup
                       sh './django.sh'
                   }
               }
           }
       }
   }
}
