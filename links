pipeline {
   agent any

   stages {
       stage('Checkout Code') {
           steps {
               // Check out your code repository
               checkout scm
           }
       }

       stage('Build Spring Boot App') {
           steps {
               // Build the Spring Boot application using Maven
               sh 'cd springboot-backend && mvn clean package'
           }
       }

       stage('Start MySQL Container') {
           steps {
               // Start the MySQL container with credentials from Jenkins credentials
               script {
                   def mysqlUsername = credentials('mysql_username')
                   def mysqlPassword = credentials('mysql_password')

                   sh "docker-compose up -d mysql-standalone --build-arg MYSQL_ROOT_PASSWORD=${mysqlPassword} --build-arg MYSQL_DATABASE=employeedb --build-arg MYSQL_USER=${mysqlUsername} --build-arg MYSQL_PASSWORD=${mysqlPassword}"
               }
           }
       }

       stage('Wait for MySQL to Start') {
           steps {
               // Wait for MySQL to be ready before proceeding
               script {
                   def maxAttempts = 60
                   def attempt = 0
                   def mysqlHost = 'mysql-standalone'
                   def mysqlPort = '3306'

                   while (attempt < maxAttempts) {
                       try {
                           sh "nc -z $mysqlHost $mysqlPort"
                           echo "MySQL is up and running."
                           break
                       } catch (Exception e) {
                           echo "MySQL is not yet available. Waiting..."
                           sleep 5
                           attempt++
                       }
                   }
                   if (attempt >= maxAttempts) {
                       error "MySQL took too long to start."
                   }
               }
           }
       }

       stage('Start Spring Boot App Container') {
           steps {
               // Start the Spring Boot application container
               sh 'docker-compose up -d springboot-docker-container'
           }
       }

       stage('Build and Start Angular App Container') {
           steps {
               // Build the Angular application
               sh 'docker-compose build angular-docker-container'

               // Start the Angular application container
               sh 'docker-compose up -d angular-docker-container'
           }
       }
   }

   post {
       always {
           // Clean up: stop and remove containers
           sh 'docker-compose down'
       }
   }
}
