ModuleNotFoundError: No module named 'rest_framework'
==================================
Start server
Watching for file changes with StatReloader
Exception in thread django-main-thread:
Traceback (most recent call last):
  File "/usr/lib/python3.10/threading.py", line 1016, in _bootstrap_inner
    self.run()
  File "/usr/lib/python3.10/threading.py", line 953, in run
    self._target(*self._args, **self._kwargs)
  File "/usr/lib/python3/dist-packages/django/utils/autoreload.py", line 64, in wrapper
    fn(*args, **kwargs)
  File "/usr/lib/python3/dist-packages/django/core/management/commands/runserver.py", line 110, in inner_run
    autoreload.raise_last_exception()
  File "/usr/lib/python3/dist-packages/django/utils/autoreload.py", line 87, in raise_last_exception
    raise _exception[1]
  File "/usr/lib/python3/dist-packages/django/core/management/__init__.py", line 375, in execute
    autoreload.check_errors(django.setup)()
  File "/usr/lib/python3/dist-packages/django/utils/autoreload.py", line 64, in wrapper
    fn(*args, **kwargs)
  File "/usr/lib/python3/dist-packages/django/__init__.py", line 24, in setup
    apps.populate(settings.INSTALLED_APPS)
  File "/usr/lib/python3/dist-packages/django/apps/registry.py", line 91, in populate
    app_config = AppConfig.create(entry)
  File "/usr/lib/python3/dist-packages/django/apps/config.py", line 224, in create
    import_module(entry)
  File "/usr/lib/python3.10/importlib/__init__.py", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1050, in _gcd_import
  File "<frozen importlib._bootstrap>", line 1027, in _find_and_load
  File "<frozen importlib._bootstrap>", line 1004, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'rest_framework'





FROM python:3.7.3-stretch

ENV PYTHONUNBUFFERED 1

WORKDIR /app

COPY requirements.txt .

RUN pip install -r requirements.txt

COPY . .

RUN chmod +x /app/django.sh

EXPOSE 8000

ENTRYPOINT ["/app/django.sh"]

#!/bin/bash
echo "Create migrations"
python3 manage.py makemigrations djangoapp
echo "=================================="

echo "Migrate"
python3 manage.py migrate
echo "=================================="

echo "Create Superuser"
DJANGO_SUPERUSER_USERNAME="admin" \
DJANGO_SUPERUSER_PASSWORD="" \
DJANGO_SUPERUSER_EMAIL="email@kanis.hk" \
python3 manage.py createsuperuser --noinput
echo "=================================="

echo "Start server"
python3 manage.py runserver 0.0.0.0:8000



version: '3.9'

services:
  djangoapp:
    container_name: djangoapp
    build: .
    ports:
      - "8000:8000"
    environment:
      - PG_USER=postgres
      - PG_PASSWORD=postgres
      - PG_DB=postgres
      - PG_HOST=db
      - PG_PORT=5432
    depends_on:
      - db
  db:
    container_name: db
    image: postgres:12
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data

volumes:
  pgdata: {}



pipeline {
   agent any

   environment {
       registry = "srikanthbattula/djangoapp"
       registryCredential = 'dockerhub_id'
       DJANGO_SUPERUSER_PASSWORD = ('django_id')
   }

   stages {
       stage('Checkout') {
           steps {
               checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/Srikanthbatt/Django-Postgres.git']])
           }
       }

       stage('Build and Push Image') {
           steps {
               script {
                   // Build and push your Docker image
                   dockerImage = docker.build registry
                   docker.withRegistry('', registryCredential) {
                       dockerImage.push()
                   }
               }
           }
       }

       stage('Deploy Using Docker Compose') {
           steps {
               // Start services using Docker Compose
               sh 'docker-compose up -d'
           }
       }

       stage('Run Tests') {
           steps {
               // Run tests for the Django application
               sh 'docker-compose exec -T djangoapp python manage.py test'
           }
       }

       stage('Run Django Setup') {
           steps {
               script {
                   // Set executable permissions for django.sh
                   sh 'chmod +x django.sh'
                   // Get the secret value using withCredentials
                   withCredentials([string(credentialsId: 'django_id', variable: 'DJANGO_SUPERUSER_PASSWORD')]) {
                       DJANGO_SUPERUSER_PASSWORD = env.DJANGO_SUPERUSER_PASSWORD
                       sh './django.sh'
                   }
               }
           }
       }
   }
}

